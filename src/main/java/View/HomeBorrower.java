package View;

import DAO.BooksDAO;
import Entity.AwaitingApproval;
import Entity.Book;
import Entity.CallCard;
import DAO.CallCardDAO;
import Form.FilterForm;

/**
 *
 * @author Nguyen Dai Phat
 */
import Entity.User;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import DAO.AwaitingApprovalDAO;
import DAO.ReturnBookDAO;
import Entity.ReturnBook;
import java.awt.Color;
import javax.swing.JFrame;
public class HomeBorrower extends javax.swing.JFrame {

    private User user;
    private List<AwaitingApproval> picks = new ArrayList<>();
    private List<AwaitingApproval> awaitingApprovalList;
    private AwaitingApprovalDAO awaitingApprovalDAO;
    private CallCardDAO callCardDAO;
    private int numberOfBooksBorrowing;
    private BooksDAO booksDAO;
//    FilterForm filterBook;
//    private int numberOfBook;
//    private Book book;
    /**
     * Creates new form HomLibrarian
     */
    public HomeBorrower(User user) {
        this.user = user;
        initComponents();
        
        FilterForm filterForm = new FilterForm();
        booksDAO = new BooksDAO();
        List<Book> listBook = booksDAO.findAll(filterForm);
        awaitingApprovalDAO = new AwaitingApprovalDAO();
        callCardDAO = new CallCardDAO();
        awaitingApprovalList = awaitingApprovalDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tbBooks = (DefaultTableModel) tableListBook.getModel();
        tbBooks.setRowCount(0);
        for (Book book : listBook) {
            int numberOfBook = book.getTotalQuantity()-callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId());
            tbBooks.addRow(new Object[]{book.getBookId(), book.getName(), book.getAuthor(), book.getSubject(),numberOfBook});
        }
        
        ReturnBookDAO returnBookDAO = new ReturnBookDAO();
        ReloadAwaitingApproval();
        List<CallCard> callCards = callCardDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tbHistory = (DefaultTableModel) tableHistory.getModel();
        tbHistory.setRowCount(0);
        for (CallCard callCard : callCards) {
            ReturnBook returnBook = returnBookDAO.findByCallCardId(callCard.getCallCardId());
            if(returnBook.getReturnBookId()==null){
                tbHistory.addRow(new Object[]{callCard.getCallCardId(),callCard.getBorrowedDate().toString(),callCard.getBook().getName(),
                callCard.getBook().getPublisher(),callCard.getBook().getYearOfPublisher(),callCard.getBook().getAuthor(),callCard.getBorrowedDay(),
                "Chưa trả"});
            }
            else{
                tbHistory.addRow(new Object[]{callCard.getCallCardId(),callCard.getBook().getBookId(), callCard.getBook().getName(),
                callCard.getBorrowedDay(),callCard.getBorrowedDate().toString(),
                returnBook.getPayDay().toString(),returnBook.getStatus(),returnBook.getFines(),returnBook.getNote()});
            }   
        }
    }

    public HomeBorrower() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        logout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        booksList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputSearch = new javax.swing.JTextPane();
        buttonSearch = new javax.swing.JButton();
        typeSearch = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        typeSubjectFilter = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableListBook = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        bookLoanList = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableAwaitingApproval = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        number = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1100, 700));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(1280, 629));

        logout.setBackground(new java.awt.Color(153, 153, 153));
        logout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logout.setText("Đăng xuất");
        logout.setToolTipText("");
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(153, 153, 153));
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1204, 730));

        booksList.setBackground(new java.awt.Color(228, 228, 228));

        inputSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputSearch.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(inputSearch);

        buttonSearch.setBackground(new java.awt.Color(153, 153, 153));
        buttonSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonSearch.setText("Tìm kiếm");
        buttonSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSearchMouseClicked(evt);
            }
        });

        typeSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên Sách", "Tên Tác Giả" }));
        typeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tìm kiếm theo");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Thể loại");

        typeSubjectFilter.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeSubjectFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Sách kỹ năng", "Sách truyện", "Tài liệu", "Sách Chính trị - pháp luật", "Sách Khoa học công nghệ – Kinh tế", "Sách Văn học nghệ thuật", "Sách Văn hóa xã hội – Lịch sử", "Sách Giáo trình", "Sách Truyện, tiểu thuyết", "Sách Tâm lý, tâm linh, tôn giáo", "Sách thiếu nhi" }));

        tableListBook.setAutoCreateRowSorter(true);
        tableListBook.setBackground(new java.awt.Color(204, 204, 204));
        tableListBook.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableListBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Tác giả", "Thể loại", "Số lượng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableListBook.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tableListBook.setRowHeight(30);
        jScrollPane2.setViewportView(tableListBook);

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("Mượn");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout booksListLayout = new javax.swing.GroupLayout(booksList);
        booksList.setLayout(booksListLayout);
        booksListLayout.setHorizontalGroup(
            booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksListLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(typeSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeSubjectFilter, 0, 255, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, booksListLayout.createSequentialGroup()
                        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(426, Short.MAX_VALUE))
            .addGroup(booksListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        booksListLayout.setVerticalGroup(
            booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(typeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(typeSubjectFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sách", booksList);

        jPanel4.setBackground(new java.awt.Color(228, 228, 228));

        TableAwaitingApproval.setBackground(new java.awt.Color(204, 204, 204));
        TableAwaitingApproval.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        TableAwaitingApproval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã chờ mượn", "Mã Sách", "Tên Sách", "Tác Giả", "Thể Loại", "Số Ngày Mượn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableAwaitingApproval.setIntercellSpacing(new java.awt.Dimension(5, 5));
        TableAwaitingApproval.setRowHeight(30);
        jScrollPane5.setViewportView(TableAwaitingApproval);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel4.setText("Danh sách đang chờ duyệt");

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Xóa");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        number.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        tableHistory.setBackground(new java.awt.Color(204, 204, 204));
        tableHistory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã mượn sách", "Mã sách", "Tên sách", "Ngày mượn", "Số ngày mượn", "Ngày trả", "Tình trạng", "Tiền phạt", "Ghi chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tableHistory.setRowHeight(30);
        jScrollPane7.setViewportView(tableHistory);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel1.setText("Lịch sử mượn");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1049, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(number, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout bookLoanListLayout = new javax.swing.GroupLayout(bookLoanList);
        bookLoanList.setLayout(bookLoanListLayout);
        bookLoanListLayout.setHorizontalGroup(
            bookLoanListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bookLoanListLayout.setVerticalGroup(
            bookLoanListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Mượn", bookLoanList);

        jButton2.setBackground(new java.awt.Color(153, 153, 153));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Đổi mật khẩu ");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(logout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("jTabbedPanne1");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logoutActionPerformed

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        Login login = new Login();
        login.setVisible(true);
        login.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_logoutMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if (TableAwaitingApproval.getSelectedRow() == -1 ) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách để xóa ! ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }  else {
            int[] rows = TableAwaitingApproval.getSelectedRows();
            for (int i : rows) {
                String bookAwaitId = TableAwaitingApproval.getModel().getValueAt(i, 0).toString();
                awaitingApprovalDAO.deleteById(bookAwaitId);
            }
//            resetTableAwait();
              ReloadAwaitingApproval();
        }
        //
        reloadNumberOfBooksBorrowing();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        reloadNumberOfBooksBorrowing();
        ReloadAwaitingApproval();
        
        if (tableListBook.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách để đăng kí mượn", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        else if(numberOfBooksBorrowing<5){
            String bookId = tableListBook.getModel().getValueAt(tableListBook.getSelectedRow(), 0).toString();
            Book book = booksDAO.findByBookId(bookId);
            int numberOfBook = book.getTotalQuantity()-callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId());
            if(numberOfBook<=0){
            JOptionPane.showMessageDialog(null, "Đã hết sách", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
            else {
                AwaitingApproval awaitingApproval = new AwaitingApproval();
            awaitingApproval.setBook(book);
            awaitingApproval.setUser(user);

            switch (book.getSubject()) {
                case "Sách kỹ năng":
                awaitingApproval.setBorrowedDay(21);
                break;
                case "Sách truyện":
                awaitingApproval.setBorrowedDay(25);
                break;
                case "Tài liệu":
                awaitingApproval.setBorrowedDay(60);
                break;
                case "Sách Khoa học công nghệ – Kinh tế":
                awaitingApproval.setBorrowedDay(15);
                break;
                case "Sách Văn học nghệ thuật":
                awaitingApproval.setBorrowedDay(15);
                break;
                case "Sách Văn hóa xã hội – Lịch sử":
                awaitingApproval.setBorrowedDay(14);
                break;
                case "Sách Giáo trình":
                awaitingApproval.setBorrowedDay(45);
                break;
                case "Sách Truyện, tiểu thuyết":
                awaitingApproval.setBorrowedDay(25);
                break;
                case "Sách Tâm lý, tâm linh, tôn giáo":
                awaitingApproval.setBorrowedDay(10);
                break;
                case "Sách thiếu nhi":
                awaitingApproval.setBorrowedDay(7);
                break;
                default:
                break;
            }

            picks.add(awaitingApproval);
            AwaitingApprovalDAO awaitingApprovalDAO = new AwaitingApprovalDAO();
            awaitingApprovalDAO.save(picks);
            picks.clear();
            reloadNumberOfBooksBorrowing();
            ReloadAwaitingApproval();  
//            resetTableBooks(filterBook);
            }
            
        }
        else if(numberOfBooksBorrowing>=5){
            JOptionPane.showMessageDialog(null, "Bạn đã mượn quá số sách , Mỗi người chỉ được mượn tối đa cùng lúc 5 quyển ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void typeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeSearchActionPerformed

    private void buttonSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSearchMouseClicked
        // TODO add your handling code here:
        FilterForm filterForm = new FilterForm();
        if (!typeSubjectFilter.getSelectedItem().equals("Tất cả")) {
            filterForm.setTypeFilter("subject");
            filterForm.setFilter(typeSubjectFilter.getSelectedItem().toString());
        }
        if(typeSubjectFilter.getSelectedItem().equals("Tất cả")){
            filterForm.setTypeFilter("");
            filterForm.setFilter("");
        }
        switch (typeSearch.getSelectedItem().toString()) {
            case "Tất cả":
            filterForm.setTypeSearch("`name` LIKE '%" + inputSearch.getText() + "%' OR `author`");
            filterForm.setSearch(inputSearch.getText());
            break;
            case "Tên Sách":
            filterForm.setTypeSearch("name");
            filterForm.setSearch(inputSearch.getText());
            break;
            case "Tên Tác Giả":
            filterForm.setTypeSearch("author");
            filterForm.setSearch(inputSearch.getText());
            break;
            default:
            break;
        }
        List<Book> listBook = booksDAO.findAll(filterForm);
        DefaultTableModel tbBooks = (DefaultTableModel) tableListBook.getModel();
//        tbBooks.setRowCount(0);
        for (Book book : listBook) {
            int numberOfBook = book.getTotalQuantity()-callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId());
            tbBooks.addRow(new Object[]{book.getBookId(), book.getName(), book.getAuthor(), book.getSubject(), numberOfBook});
        }
    }//GEN-LAST:event_buttonSearchMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        ChangeKey changeKey = new ChangeKey(user);
        changeKey.setVisible(true);
        changeKey.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeBorrower().setVisible(true);
            }
        });
    }
    
    public void ReloadAwaitingApproval(){
        awaitingApprovalList=awaitingApprovalDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tableAwaitingApproval = (DefaultTableModel) TableAwaitingApproval.getModel();
        tableAwaitingApproval.setRowCount(0);
        for (AwaitingApproval awaitingApproval : awaitingApprovalList) {
            tableAwaitingApproval.addRow(new Object[]{awaitingApproval.getId(), awaitingApproval.getBook().getBookId()
                    ,awaitingApproval.getBook().getName(),awaitingApproval.getBook().getAuthor(), awaitingApproval.getBook().getSubject(),
                    awaitingApproval.getBorrowedDay()});
        }
        reloadNumberOfBooksBorrowing();
    }
    
//    public void resetTableBooks(FilterForm filterForm) {
//        List<Book> listBook = booksDAO.findAll(filterForm);
//        DefaultTableModel tbBooks = (DefaultTableModel) tableListBook.getModel();
//        tbBooks.setRowCount(0);
//        for (Book book : listBook) {
//            int numberOfBook = book.getTotalQuantity()-callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId());
//            tbBooks.addRow(new Object[]{book.getBookId(), book.getName(), book.getAuthor(), book.getSubject(),callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId()),numberOfBook});
//        }
//    }

    public void reloadNumberOfBooksBorrowing(){
        numberOfBooksBorrowing = 0;
        numberOfBooksBorrowing += callCardDAO.numberOfBorrowingBooksByUser(user.getLibraryCard());
        numberOfBooksBorrowing += awaitingApprovalDAO.numberOfAwtingApprovalByUser(user.getLibraryCard());
        numberOfBooksBorrowing += picks.size();
        number.setText(numberOfBooksBorrowing + "/5");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableAwaitingApproval;
    private javax.swing.JPanel bookLoanList;
    private javax.swing.JPanel booksList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JTextPane inputSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logout;
    private javax.swing.JLabel number;
    private javax.swing.JTable tableHistory;
    private javax.swing.JTable tableListBook;
    private javax.swing.JComboBox<String> typeSearch;
    private javax.swing.JComboBox<String> typeSubjectFilter;
    // End of variables declaration//GEN-END:variables
}
